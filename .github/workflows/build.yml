name: Build and Release
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            runtime: win-x64
            extension: .exe
            os_name: Windows
          - os: ubuntu-latest
            runtime: linux-x64
            extension: ""
            os_name: Linux
          - os: macos-latest
            runtime: osx-x64
            extension: ""
            os_name: Mac
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    # Different publish approaches for each platform
    - name: Publish Windows
      if: matrix.os == 'windows-latest'
      run: |
        dotnet publish --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./build -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
    
    - name: Publish Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        dotnet publish --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./build -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
        chmod +x ./build/Symphex
    
    - name: Publish macOS
      if: matrix.os == 'macos-latest'
      run: |
        # Publish without single file for macOS to avoid native library issues
        dotnet publish --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./build-temp -p:IncludeNativeLibrariesForSelfExtract=true -p:UseAppHost=true
        
        # Create proper macOS app bundle
        APP_NAME="Symphex"
        BUNDLE_NAME="$APP_NAME.app"
        
        mkdir -p "./build/$BUNDLE_NAME/Contents/MacOS"
        mkdir -p "./build/$BUNDLE_NAME/Contents/Resources"
        
        # Copy all files to app bundle
        cp -r ./build-temp/* "./build/$BUNDLE_NAME/Contents/MacOS/"
        
        # Create Info.plist with proper permissions
        cat > "./build/$BUNDLE_NAME/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>Symphex</string>
            <key>CFBundleIdentifier</key>
            <string>com.symphex.app</string>
            <key>CFBundleName</key>
            <string>Symphex</string>
            <key>CFBundleDisplayName</key>
            <string>Symphex</string>
            <key>CFBundleVersion</key>
            <string>1.0.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleSignature</key>
            <string>????</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSAppTransportSecurity</key>
            <dict>
                <key>NSAllowsArbitraryLoads</key>
                <true/>
            </dict>
        </dict>
        </plist>
        EOF
        
        # Set executable permissions
        chmod +x "./build/$BUNDLE_NAME/Contents/MacOS/$APP_NAME"
        find "./build/$BUNDLE_NAME/Contents/MacOS" -name "*.dylib" -exec chmod +x {} \;
        
        # Remove extended attributes that cause Gatekeeper issues
        find "./build/$BUNDLE_NAME" -exec xattr -c {} \; 2>/dev/null || true
        
        # Clean up temp directory
        rm -rf ./build-temp
    
    - name: Create Archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Compress-Archive -Path ./build/* -DestinationPath ${{ matrix.os_name }}.zip
    
    - name: Create Archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build && zip -r ../${{ matrix.os_name }}.zip .
        
    - name: Create Archive (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd build && zip -r ../${{ matrix.os_name }}.zip Symphex.app
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os_name }}
        path: ./${{ matrix.os_name }}.zip
